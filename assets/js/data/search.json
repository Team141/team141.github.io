[ { "title": "React + Redux", "url": "/posts/REACT_AND_REDUX/", "categories": "React, Redux", "tags": "React, Redux", "date": "2023-05-22 16:30:00 +0530", "snippet": "Sample React &amp;amp; Redux ApplicationSample React &amp;amp; Redux working applicationconst { createStore, bindActionCreators } = Redux;const { Provider, connect } = ReactRedux;//REDUX:const ADD=&#39;ADD&#39;;const addMessage =(message)=&amp;gt;{ return { type:ADD, message };}const messageReducer = (state=[], action)=&amp;gt;{ switch(action.type){ case ADD: return state.concat(action.message); break; default: return state; }}const store = Redux.createStore(messageReducer);//REACT:class DisplayMessages extends React.Component { constructor(props){ super(props); this.state={ input:&#39;&#39;, }; } handleChange(event){ this.setState({ input: event.target.value }) }; submitMessage(){ this.props.submitNewMessage(this.state.input); this.setState((state)=&amp;gt;{ return{ input:&#39;&#39;, }; }); } render(){ return ( &amp;lt;div&amp;gt; &amp;lt;input onChange={this.handleChange.bind(this)} value={this.state.input}/&amp;gt; &amp;lt;button onClick={this.submitMessage.bind(this)}&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;ul&amp;gt; {this.props.messages.map((messages,idx)=&amp;gt;{ return( &amp;lt;li key={idx}&amp;gt;{messages}&amp;lt;/li&amp;gt; ) })} &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; ); } }//REACT-REDUX CONNECT:const mapStateToProps = (state) =&amp;gt;{ return { messages: state }}const mapDispatchToProps = (dispatch)=&amp;gt;{ return { submitNewMessage:(newMessage)=&amp;gt;{ dispatch(addMessage(newMessage)) } }}const Container = connect(mapStateToProps,mapDispatchToProps)(DisplayMessages)//Provider:class AddWrapper extends React.Component{ render(){ return( &amp;lt;Provider store={store}&amp;gt; &amp;lt;Container/&amp;gt; &amp;lt;/Provider&amp;gt; ); }}ReactDOM.render(&amp;lt;AddWrapper/&amp;gt;, document.getElementById(&#39;root&#39;))//HTML:&amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;Required Imports for React Application/*import React from &#39;react&#39;import ReactDOM from &#39;react-dom&#39;import { Provider, connect } from &#39;react-redux&#39;import { createStore, combineReducers, applyMiddleware } from &#39;redux&#39;import thunk from &#39;redux-thunk&#39;import rootReducer from &#39;./redux/reducers&#39;import App from &#39;./components/App&#39;const store = createStore( rootReducer, applyMiddleware(thunk));ReactDOM.render( &amp;lt;Provider store={store}&amp;gt; &amp;lt;App/&amp;gt; &amp;lt;/Provider&amp;gt;, document.getElementById(&#39;root&#39;));*/// Only change code below this lineconsole.log(&#39;Now I know React and Redux!&#39;)You can use following links to test above codeOnline Testing Environment https://codepen.io/To test locally set up React in you PC using following Linkhttps://www.freecodecamp.org/news/install-react-with-create-react-app/" }, { "title": "Schedule For Interview Preparation", "url": "/posts/schedule-for-interview-prep/", "categories": "Interview, Schedule", "tags": "Timetable, Daily Routine", "date": "2022-04-27 20:00:00 +0530", "snippet": "This post is to show a sample of scheduling “Daily Routine and Study Timetable” for cracking DevOps Interview.Daily Routine &amp;amp; Study TimeTableTime TableStudy TimetableDaily RoutineDaily Routine" }, { "title": "Docker History", "url": "/posts/docker-history/", "categories": "Docker, Docker Build", "tags": "Docker, Dockerbuild, Dockerfile", "date": "2022-03-08 11:33:00 +0530", "snippet": "Building an Apache2 Docker container from Docker FileDockerfileFROM ubuntu:18.04LABEL &quot;Project&quot;=&quot;LilFasion&quot;ENV DEBIAN_FRONTEND=noninteractiveRUN apt updateRUN apt install apache2 -yWORKDIR /var/www/html#COPY lilfasion.tar.gz /var/www/htmlADD lilfasion.tar.gz /var/www/htmlCMD [&quot;/usr/sbin/apache2ctl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]RUN service apache2 restartVOLUME /var/log/apache2EXPOSE 80 Note: Copy of above code into file named called Dockerfile (‘D’ must be capital).Download following filelilfasion.tar.gz Note: Please place Dockerfile and Archive file in one folder and build Docker container from same parent folderHistory to build container from Docker File # system update sudo apt-get update #install docker in ubuntu sudo apt-get install ca-certificates curl gnupg lsb-release echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io #test docker installation sudo systemctl status docker sudo docker run hello-world sudo docker ps sudo docker ps -a sudo docker images #adding sudo permissions to user for docker sudo vim /etc/group ### Logout and Login ### id docker images docker ps docker ps -a docker run --name web01 -p 9070:80 -d nginx docker ps docker logs web01 docker ps docker images docker stop web01 docker images docker ps docker ps -a docker start web01 docker restart web01 clear docker stop web01 docker rm web01 docker ps docker rmi nginx:latest docker images docker rmi images docker rmi feb5d9fea6a5 docker ps -a docker rm e85182a36757 docker rmi feb5d9fea6a5 docker images docker pull mysql:5.7 clear docker inspect mysql:5.7 docker run -d -P mysql:5.7 docker ps docker ps -a docker logs 081559b2d468 docker run -d -P docker logs 081559b2d468 docker run -d -P -e MYSQL_ROOT_PASSWORD=secretpass mysql:5.7 docker ps docker volume docker volume create vprodata docker volume ls docker run -d -P -v vprodata:/var/lib/mysql docker run -d -P -v vprodata=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secretpass mysql:5.7 docker ps docker volume ls docker stop 6770957511b6 docker rm 6770957511b6 docker ps docker volume ls docker exec admiring_tu ls /var/lib/mysql docker run -d -P -v vprodata=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secretpass mysql:5.7 docker volume ls sudo ls /var/lib/docker/ sudo ls /var/lib/docker/volumes sudo ls /var/lib/docker/volumes/vprodata sudo ls /var/lib/docker/volumes/vprodata/_data docker ps docker stop 6ed5dceba392 750611cb2e44 docker rm 6ed5dceba392 750611cb2e44 docker ps -a docker stop 081559b2d468 docker rm 081559b2d468 docker ps -a docker run -d -P -v vprodata=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secretpass mysql:5.7 docker exec /var/lib/mysql docker ps docker exec youthful_mendel /var/lib/mysql docker exec youthful_mendel ls /var/lib/mysql sudo ls /var/lib/docker/ sudo ls /var/lib/docker/volumes/ sudo ls /var/lib/docker/volumes/vprodata/ sudo ls /var/lib/docker/volumes/vprodata/_data docker logs youthful_mendel docker run -d -P -e MYSQL_ROOT_PASSWORD=secretpass mysql:5.7 docker volume create vprodata docker volume ls docker run -d -P -v vprodata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secretpass mysql:5.7 docker ps docker exec jovial_bhaskara ls /var/lib/mysql ls sudo ls /var/lib/docker/volumes sudo ls /var/lib/docker/volumes/vprodata/_data docker exec jovial_bhaskara ls /var/lib/mysql docker stop jovial_bhaskara docker rm jovial_bhaskara sudo ls /var/lib/docker/volumes/vprodata/_data docker ps -a clear mkdir code touch code/file{1..5}.pyp ls code/ docker run -d -P -v /home/ubuntu/code:/code nginx docker ps docker exec vigorous_tesla ls docker exec vigorous_tesla ls /code docker inspect vigorous_tesla docker image docker images docker inspect c919045c4c2b clear ls rm -rf code/ ls docker ps -a docker stop youthful_mendel focused_roentgen vigorous_tesla docker rm youthful_mendel focused_roentgen vigorous_tesla docker rmi * docker rmi --help docker images docker rmi mysql:5.7 nginx:latest docker images clear mkdir antique cd antique/ cd wget https://www.tooplate.com/zip-templates/2126_antique_cafe.zip ls unzip 2126_antique_cafe.zip sudo apt install unzip clear unzip 2126_antique_cafe.zip clear cd 2126_antique_cafe/ tar cvzf web01.tar.gz * clear ls mv web01.tar.gz ../ ls cd ls rm -rf 2126_antique_cafe* rm antique/ rm-rf antique/ rm -rf antique/ ls mkdir antique mv web01.tar.gz antique/ cd antique/ ls vim Dockerfile docker build -t --help docker build --help docker build -t antiqueweb .. docker build -t antiqueweb . vim Dockerfile docker build -t antiqueweb . clear docker build -t antiqueweb . clear docker images docker rmi ad94ae422a95 docker images docker inspect antiqueweb docker run -d -p 7080:80 antiqueweb docker ps tar xvzf web01.tar.gz ls mv web01.tar.gz Dockerfile ../ ls rm -rf * ls mv ~/web01.tar.gz . mv ~/Dockerfile . ls docker logs docker ps docker logs hungry_chaplygin docker stop hungry_chaplygin docker rm hungry_chaplygin docker rmi antiqueweb:latest cat &amp;gt; Dockerfile cat Dockerfile mv web01.tar.gz lilfasion.tar.gz ls docker build -t web01 . docker run -d -p 7080:80 antiqueweb docker run -d -p 7080:80 web01 docker ps -a docker logs amazing_germain docker run -d -p 7080:80 web01 -h docker logs amazing_germain docker ps docker stop amazing_germain docker rm amazing_germain docker run -d -h -p 7080:80 web01 docker run -d -P web01:latest docker logs amazing_germain docker ps docker logs hardcore_brown docker stop hardcore_brown docker rmhardcore_brown docker rm hardcore_brown docker rmi web01:latest docker ps -a docker stop e679b42ea4f4 docker rm e679b42ea4f4 docker rmi web01:latest ls vim Dockerfile docker build web01 . docker build -t web01 . docker rmi web01:latest vim Dockerfile docker build -t web01 . docker rmi web01:latest vim Dockerfile docker build -t web01 . docker run -d -p 7070:80 web01 docker ps docker logs vigorous_goldberg docker logs vweb01 docker logs 4e16fa1f787f docker stop 4e16fa1f787f docker rm 4e16fa1f787f docker rmi web01 vim Dockerfile docker build -t LilFasion:v1 . docker build -t LilFasion . docker build -t web01 . cat /etc/hosts ls cd antique/ ls vim Dockerfile docker build -t web01 . docker images docker run -d -p 7080:80 web01:latest docker ps docker logs youthful_feynman docker ps -a docker ps docker stop a5960658ac2b docker rm a5960658ac2b docker images docker login docker push kumarradev5/web01 docker push kumarradev5/web01:latest docker push kumarradev5/web01:v1 docker push kumarradev5/web01 docker tag web01:latest web01:v1 docker images docker push web01:v1 docker push kumarrajdev5/web01:v1 docker push web01:v1 docker push kumarrajdev5/web01 docker images docker push web01 docker push kumarrajdev5/web01:v1 docker push web01 docker logput docker logout docker login docker push web01 docker push kumarrajdev5/web01 docker tag web01:v1 kumarrajdev5/web01:v1 docker push kumarrajdev5/web01 docker images docker rmi kumarrajdev5/web01:v1 web01:latest web01:v1 docker images docker rmi ubuntu:latest ubuntu:18.04 docker build -t fasionimg . docker build -t kumarrajdev5/fasionimg:v1 . docker push kumarrajdev5/fasionimg:v1 docker images docker rmi kumarrajdev5/fasionimg:v1 fasionimg:latest docker images docker rmi ubuntu:18.04 docker images docker run -d -P --name kumar kumarrajdev5 / docker run -d -P --name kumar kumarrajdev5/fasionimg docker run -d -P --name kumar kumarrajdev5/fasionimg:v1 docker run -d -p 7000:80 --name kumar kumarrajdev5/fasionimg:v1 docker run -d -p 7000:80 --name kumar1 kumarrajdev5/fasionimg:v1 docker ps docker stop kumar docker stop kumar1 docker rm kumar kumar1 docker rmi kumarrajdev5/fasionimg:v1 docker image docker images cd .. history history &amp;gt; history.txt ls cat -n history.txt cat -b history.txt ls rm-rf history.txt rm history.txt ls history&amp;lt; history.txt" }, { "title": "Python Scripting", "url": "/posts/python-scripting/", "categories": "Bash scripting, Linux", "tags": "Bash scripts", "date": "2022-02-18 11:33:00 +0530", "snippet": "Code blockprint (&quot;welcome to Python&quot;)welcome to Pythonprint(&quot;Python indentations&quot;)Python indentationsprint(&quot;Python indentations&quot;)print(&quot;&quot;)print(&quot;#######&quot;)Python indentations########This is comment, single lineprint(&quot;$$$$$$$$$$$$$$&quot;)$$$$$$$$$$$$$$&quot;&quot;&quot;Thisis amulti linecomment&quot;&quot;&quot;print(&quot;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&quot;)&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&#39;&#39;&#39;This isa multi linecomment&#39;&#39;&#39;print(&quot;$$$$$$$$$$$$&quot;)$$$$$$$$$$$$Name=&#39;python&#39;print(&quot;Name&quot;)print(Name)print(&#39;Name&#39;)NamepythonNameName=PythonPython=&#39;Python&#39;print(&quot;This is a string.&quot;)print(&#39;This is a string.&#39;)This is a string.This is a string.Python=’Python’print(“This is a”,Python)print(&quot;Kumar raj luckynumber is&quot;,7)Kumar raj luckynumber is 7#Paragraph stringprint(&quot;&quot;&quot;Thisisamulti linestring print&quot;&quot;&quot;)Thisisamulti linestring printa = &#39;alpha&#39;b = &quot;beta&quot;c = &quot;&quot;&quot;theta&quot;&quot;&quot;print(&quot;a for&quot;,a,&quot;\\nb for&quot;,b,&quot;\\nc for&quot;,c)a for alphab for betac for thetaprint(type(a))&amp;lt;class &#39;str&#39;&amp;gt;#Numbers#Integerx = 12y = 6.7print(x,y)12 6.7#List, collection of multi datatypes, enclosed in []. This# datatypes can be changeable(MUTABLE)list1 = [a, b, c, &quot;Devops&quot;, 89, 90.245]print(list1)[&#39;alpha&#39;, &#39;beta&#39;, &#39;theta&#39;, &#39;Devops&#39;, 89, 90.245]#Tuple, collection of multi datatypes, enclosed in {}. This# datatypes can be changeable(IMMUTABLE)tuple1 = {a, b, c, &quot;Devops&quot;, 89, 90.245}print(tuple1){&#39;theta&#39;, &#39;Devops&#39;, &#39;beta&#39;, 89, 90.245, &#39;alpha&#39;}#Dictionary, collection of elements in pair(key:value), enclosed inside {}my_dictionary = {&quot;Name&quot;:&quot;Kumar Raj&quot;,&quot;Age&quot;:21,&quot;Weight&quot;:54,&quot;Hobbies&quot;:[&quot;Reading&quot;,&quot;Listening to Music&quot;]}print(my_dictionary){&#39;Name&#39;: &#39;Kumar Raj&#39;, &#39;Age&#39;: 21, &#39;Weight&#39;: 54, &#39;Hobbies&#39;: [&#39;Reading&#39;, &#39;Listening to Music&#39;]}###SLICINGmessage = &quot;Virus new variant is deltacron&quot;print(message)Virus new variant is deltacronprint(message[0])print(message[3])print(message[-4])print(message[-1+1])VucV#string slicingprint(message[6:10])newprint(message[10:17])variantprint(message[-9:])deltacronprint(message[:5])Virus#List Slicinganimals=[&quot;snake&quot;, &quot;Honeybadger&quot;, &quot;Trex&quot;, &quot;Leopard&quot;, &quot;Cheetah&quot;, &quot;Elephant&quot;, &quot;crocodile&quot;]print(animals)[&#39;snake&#39;, &#39;Honeybadger&#39;, &#39;Trex&#39;, &#39;Leopard&#39;, &#39;Cheetah&#39;, &#39;Elephant&#39;, &#39;crocodile&#39;]print(animals[1])print(animals[2:5])print(animals[:4])print(animals[-3:])Honeybadger[&#39;Trex&#39;, &#39;Leopard&#39;, &#39;Cheetah&#39;][&#39;snake&#39;, &#39;Honeybadger&#39;, &#39;Trex&#39;, &#39;Leopard&#39;][&#39;Cheetah&#39;, &#39;Elephant&#39;, &#39;crocodile&#39;]print(animals[2:5])[&#39;Trex&#39;, &#39;Leopard&#39;, &#39;Cheetah&#39;]print(animals[2:5][-2])Leopardprint(animals[2:5][-2][:3])Leoprint(animals[2:5][-2][:3][-1])o#Slicing Dictionarymy_dictionary= {&quot;Name&quot;:&quot;Imran&quot;, &quot;Age&quot;: 24, &quot;Weight&quot;: 73.5, &quot;Hobbies&quot;:[&quot;Dance&quot;, &quot;Boxing&quot;, &quot;Swimming&quot;]}print(my_dictionary){&#39;Name&#39;: &#39;Imran&#39;, &#39;Age&#39;: 24, &#39;Weight&#39;: 73.5, &#39;Hobbies&#39;: [&#39;Dance&#39;, &#39;Boxing&#39;, &#39;Swimming&#39;]}print(my_dictionary[&quot;Name&quot;])Imranprint(my_dictionary[&quot;Hobbies&quot;][-1])Swimmingprint(my_dictionary[&quot;Hobbies&quot;][-1][4:])ming" }, { "title": "Bash Scripting", "url": "/posts/bash-scripting/", "categories": "Bash scripting, Linux", "tags": "Bash scripts", "date": "2022-02-18 11:33:00 +0530", "snippet": "Code blockToday’s Assignment Single BASH Script for Webserver launch in CENTOS and UBUNTUType-2#!/bin/bash# Variable Declarationechowebtemplate=https://templatemo.com/tm-zip-files-2020/templatemo_520_highway.zipwebpage=templatemo_520_highway# Condition to test whether it is Centos or Ubuntuechosudo apt --helpif [ $? -eq 0 ]then echo &quot;############### UBUNTU MACHINE ################&quot; pkgmanage=apt pkgname=apache2else echo &quot;############### CENTOS MACHINE ################&quot; pkgmanage=yum pkgname=httpdfi# Package installation and starting webhost serviceechosudo $pkgmanage update -y &amp;gt; /dev/nullsudo $pkgmanage install $pkgname wget unzip figlet -y &amp;gt; /dev/nullsudo systemctl start $pkgnamesudo systemctl enable $pkgnamesudo ss -tunlp | grep $pkgnamesudo mkdir -p /tmp/webfile cd /tmp/webfilesudo wget $webtemplatesudo rm -rf $webpage.zip.*sudo unzip -oq $webpage.zipsudo cp -r $webpage/* /var/www/html/ &amp;gt; /dev/nullsudo systemctl restart $pkgnamesudo ss -tunlp | grep $pkgname# Acknowledging installationechoecho &quot;###############################&quot;figlet Doneecho &quot;###############################&quot;Type-1#!/bin/bashsudo apt --helpif [ $? -eq 0 ]thenecho &quot;######## UBUNTU MACHINE #######&quot;sudo apt update -ysudo apt install apache2 wget unzip -ysudo systemctl start apache2sudo systemctl enable apache2mkdir -p /tmp/webfilecd /tmp/webfilewget https://templatemo.com/tm-zip-files-2020/templatemo_520_highway.ziprm -rf templatemo_520_highway.zip.*unzip -o templatemo_520_highway.zipcp -r templatemo_520_highway/* /var/www/html/sudo systemctl restart apache2elseecho &quot;######## CENTOS MACHINE #######&quot;sudo yum update -ysudo yum install httpd wget unzip -ysudo systemctl start httpdsudo systemctl enable httpdmkdir -p /tmp/webfilecd /tmp/webfilewget https://templatemo.com/tm-zip-files-2020/templatemo_520_highway.ziprm -rf templatemo_520_highway.zip.*unzip -o templatemo_520_highway.zipcp -r templatemo_520_highway/* /var/www/html/sudo systemctl restart httpdfiShell Example#!/bin/bash### Little fashion app setup #### Variable declarationPACKAGE=&quot;apache2 wget unzip&quot;SVC=apache2ARTURL=&#39;https://www.tooplate.com/zip-templates/2127_little_fashion.zip&#39;ARTDIR=2127_little_fashionTEMPDIR=&#39;/tmp/webtempfiles&#39;# Installing Dependenciesechoecho &quot;#####################&quot;echo &quot;Installing Packages&quot;echo &quot;#####################&quot;sudo apt update &amp;gt; /dev/nullsudo apt install $PACKAGE -y &amp;gt; /dev/null# Start &amp;amp; Enable apache2echoecho &quot;#####################&quot;echo &quot;Starting Service.&quot;echo &quot;#####################&quot;sudo systemctl start $SVCsudo systemctl enable $SVC# Deploy appechoecho &quot;#####################&quot;echo &quot;Deploying Web App.&quot;echo &quot;#####################&quot;mkdir -p $TEMPDIRcd $TEMPDIRwget $1 &amp;gt; /dev/nullunzip $2.zip &amp;gt; /dev/nullsudo cp -r $2/* /var/www/html/# Bouncing serviceechoecho &quot;#####################&quot;echo &quot;Bouncing Service&quot;echo &quot;#####################&quot;sudo systemctl restart $SVCsudo systemctl status $SVC# Cleanupechoecho &quot;#####################&quot;echo &quot;Clean Resedual files&quot;echo &quot;#####################&quot;rm -rf $TEMPDIR" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 05:02:00 +0530", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39;# OAuth 2.0 Client SettingsAUTH_CONFIG = { &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;, &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;, &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % ( &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;, &#39;/admin/auth&#39; )}# XSRF SettingsXSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39; You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: &#39;G-V6XXXXXXX&#39; # fill in your Google Analytics ID pv: proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39; cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &amp;#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-10 22:04:00 +0530", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 18:25:00 +0530", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &amp;lt;GH_USERNAME&amp;gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &amp;lt;GH_USERNAME&amp;gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &amp;lt;GH_USERNAME&amp;gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem &quot;jekyll-theme-chirpy&quot; in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.2&quot;, &quot;&amp;gt;= 3.2.1&quot;+ gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.3&quot;, &quot;&amp;gt;= 3.3.0&quot; And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 11:40:00 +0530", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:---author: name: Full Name link: https://example.com---Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot; }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=&quot;700&quot; h=&quot;400&quot; }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&amp;lt;img src=&quot;/img/path/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute src, width, height, and alt for the image:---image: src: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute src only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&amp;gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho &#39;No more line numbers!&#39;```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=&quot;path/to/file&quot; }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 09:03:00 +0530", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo &quot;The command was not successful.&quot;; #do the needful / exitfi;Specific filename@import &quot;colors/light-typography&quot;, &quot;colors/dark-typography&quot;Reverse Footnote The footnote source &amp;#8617; The 2nd footnote source &amp;#8617; " } ]
